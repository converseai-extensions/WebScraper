/**
 * @file scrape_module.js
 * @author graeme@converse.ai
 * @description A simple module that will take either a URL or
 * HTML string and scrape it for user specified elements.
 *
 * Generated by the converse-cli tool for use with the Converse AI
 * Plugins SDK. https://developers.converse.ai/
 */

'use strict';

const Status          = require('@converseai/plugins-sdk').Status;
const ModuleResponse  = require('@converseai/plugins-sdk').Payloads.ModuleResponse;
const request         = require('request');
const cheerio         = require('cheerio');

/*
* Extracts html text from this element only, no child text will extracted.
*/
function extractText(elem) {
  return elem.clone().find('>*').remove().end().text().trim();
}

/*
* Turns hyperlinks into an object of {text, href} so links are
* available to the Chatflow designer.
*/
function normaliseElement(elem) {
  if (elem.is('a')) {
    return {
      href: elem.attr('href'),
      text: extractText(elem)
    }
  }
  return extractText(elem);
}

/*
* Scrapes the given html with the given selectors.
*/
function scrapeHTML(html, selectors) {
  var $ = cheerio.load(html);
  var rtn = {};
  for (var key in selectors) {
    if (selectors.hasOwnProperty(key)) {
      rtn[key] = $(selectors[key]).map(function() {
        return normaliseElement($(this));
      }).get();
    }
  }
  return rtn;
}

/*
* Either fetch the HMTL from the URL or passes the HTML on.
*/
function fetchHTML(htmlOrURL, callback) {
  if (htmlOrURL.startsWith('http://') || htmlOrURL.startsWith('https://')) {
    request(htmlOrURL, function(error, response, html){
      if(!error){
        callback(html);
      }
    });
  } else {
    callback(htmlOrURL);
  }
}


module.exports = function scrape_module (app, body) {
 /**
  * Registration parameters assigned to body.payload.registrationData
  * and Module parameters assigned to body.payload.moduleParam.
  * @example
  * var regOne = body.payload.registrationData.regOne;
  * var modOne = body.payload.moduleParam.modOne;
  */

  /** @type {String} htmlOrURL Enter either a URL (starting with http://
  * or https://) or a HTML string for data to be extracted from.  */
  var htmlOrURL = body.payload.moduleParam.html_or_url;

  /** @type {Object} selectors A map of selectors where the key is
  * the return property and the value is a jQuery selector of the
  * element you wish to extract data from.  */
  var selectors = body.payload.moduleParam.selectors;

  if (htmlOrURL && selectors){
    fetchHTML(htmlOrURL, function(html) {
      /** @type {ModuleResponse} response The Converse AI response to respond with. */
      var response = new ModuleResponse();

      /*
      * Set an object on the response. This object will be returned to and stored
      * on the current conversation state. It is important to ensure the JSON
      * definition of this module has `hasReturn` set to true. E.g. if this module
      * is fired from a state called `myState` then the object can be accessed with
      * handlebars like:
      * {{states.myState.web_scraper.scrape_module}}
      */
      response.setValue(scrapeHTML(html, selectors));

      /*
      * This will return a success status and response to the conversation.
      * It is important to always call this method when the module has finished
      * computing regardless of whether you wish to send a response or not. If not,
      * the conversation will hang indefinitely.
      */
      app.send(Status.SUCCESS, response);
    });
  } else {
    app.send(Status.FAIL);
  }
};
