/**
 * @file test/module-scrape_module-test.js
 * @author graeme@converse.ai
 * @description A simple module that will take either a URL or
 * HTML string and scrape it for user specified elements.
 *
 * Generated by the converse-cli tool for use with the ConverseAI
 * Plugins SDK. https://developers.converse.ai/
 */

const request     = require('supertest');
const expect      = require('chai').expect;
const server      = require('./lib/express');

describe('Scrape Module', function () {

  it('base', function(done) {
    request(server)
      .post('/')
      .send({
        event: 'MODULE_EXEC',
        payload: {
          moduleId: 'scrape_module',
          moduleParam: {
            html_or_url: undefined,
            selectors: undefined
          },
          registrationData: {
          }
        }
      })
      .set('X_CONVERSE_APP_TOKEN', require('../app-token'))
      .expect(200)
      .end(function(err, res) {
        expect(res.body).to.have.property('status');
        expect(res.body.status).to.equal(1);
        done();
      });
  })

  it('imdb title', function(done) {
    request(server)
      .post('/')
      .send({
        event: 'MODULE_EXEC',
        payload: {
          moduleId: 'scrape_module',
          moduleParam: {
            html_or_url: 'http://www.imdb.com/title/tt2872732/',
            selectors: {
              title: '.title_wrapper > h1[itemprop="name"]',
              year: '.title_wrapper > h1[itemprop="name"] > span > a',
              actors: '.cast_list td[itemprop="actor"] span[itemprop="name"]',
              director: 'h4:contains(Director) + span[itemprop="director"] span[itemprop="name"]',
              writer: 'h4:contains(Writer) + span[itemprop="creator"] span[itemprop="name"]'
            }
          },
          registrationData: {
          }
        }
      })
      .set('X_CONVERSE_APP_TOKEN', require('../app-token'))
      .expect(200)
      .end(function(err, res) {
        expect(res.body).to.have.property('status').to.equal(0);
        expect(res.body).to.have.property('value');
        expect(res.body.value).to.have.property('title').be.an('array').that.does.include('Lucy');
        expect(res.body.value).to.have.property('year').be.an('array');
        expect(res.body.value.year[0]).be.an('object').to.have.property('text').to.equal('2014');
        expect(res.body.value).to.have.property('actors').be.an('array').that.does.include('Scarlett Johansson');
        done();
      });
  })

});
